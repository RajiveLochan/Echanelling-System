/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package echanelling;

import DBConnector.DBConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rajive Lochchan
 */
public class AdminPatient extends javax.swing.JFrame {

    Connection con;
    PreparedStatement pst = null;
    ResultSet rs = null;

    String[] ColumnNames = {"PatName", "PatAge", "Contact", "Gender", "ResidentialAddress", "BloodGroup", "Email"};

    public AdminPatient() {
        initComponents();
        DBConnection objDB = new DBConnection();
        con = objDB.geConnection();
        PatientName();

    }

    /**
     * Creates new form AdminPatient
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        cmbblood = new javax.swing.JComboBox();
        cmbname = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table);

        cmbblood.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<select Blood Group>" }));
        cmbblood.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbbloodItemStateChanged(evt);
            }
        });
        cmbblood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbbloodActionPerformed(evt);
            }
        });

        cmbname.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<select Patient Name>" }));
        cmbname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbnameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(cmbblood, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(211, 211, 211)
                .addComponent(cmbname, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(154, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbblood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbbloodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbbloodItemStateChanged
        String ComboBloodgroup = cmbblood.getSelectedItem().toString();
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(ColumnNames);
        if (ComboBloodgroup.contains("<")) {
            table.setVisible(false);
        } else {
            table.setVisible(true);
            try {
                PreparedStatement stat = con.prepareStatement("SELECT * FROM PatientTable WHERE BloodGroup=?");
                stat.setString(1, ComboBloodgroup);
                ResultSet rs = stat.executeQuery();
                int row = 0;
                while (rs.next()) {
                    String PatientName = rs.getString("PatName");
                    String PatientAge = rs.getString("PatAge");
                    String Contact = rs.getString("Contact");
                    String Gender = rs.getString("Gender");
                    String Address = rs.getString("ResidentialAddress");
                    String Bloodgroup = rs.getString("BloodGroup");
                    String Email = rs.getString("Email");

                    model.addRow(new Object[]{PatientName, PatientAge, Contact, Gender, Address, Bloodgroup, Email});
                    row++;
                    if (row > 0) {
                        System.out.println("Found " + Bloodgroup);
                    }
                    table.setModel(model);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, "Exception error occured during execution\nError: " + e, "Blood Group Generation Error in Patient Table", JOptionPane.WARNING_MESSAGE);
            }
        }

// TODO add your handling code here:
    }//GEN-LAST:event_cmbbloodItemStateChanged

    private void cmbbloodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbbloodActionPerformed
        String ComboBlood = cmbblood.getSelectedItem().toString();
        String ComboName = "";
        if (ComboBlood.startsWith("<")) {
            cmbname.setSelectedIndex(0);
        } else {
            try {
                PreparedStatement stat = con.prepareStatement("select * from PatientTable where BloodGroup=?");
                stat.setString(1, ComboBlood);

                ResultSet rs = stat.executeQuery();

                while (rs.next()) {
                    ComboName = rs.getString("PatName").trim();
                    for (int i = 1; i < cmbname.getItemCount(); i++) {
                        if (cmbname.getItemAt(i).equals(ComboName)) {
                            cmbname.setSelectedIndex(i);
                            break;
                        }
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Exception error occured during execution\nError: " + e, "EPF Number Generation Error in Fixed Salary Table", JOptionPane.WARNING_MESSAGE);
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_cmbbloodActionPerformed

    private void cmbnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbnameActionPerformed
        String ComboName = cmbname.getSelectedItem().toString();
        String ComboBlood = "";
        if (ComboName.startsWith("<")) {
            cmbblood.setSelectedIndex(0);
        } else {
            try {
                PreparedStatement stat = con.prepareStatement("select * from PatientTable where PatName=?");
                stat.setString(1, ComboName);

                ResultSet rs = stat.executeQuery();
                while (rs.next()) {
                    ComboBlood = rs.getString("BloodGroup").trim();
                    for (int i = 1; i < cmbblood.getItemCount(); i++) {
                        if (cmbblood.getItemAt(i).equals(ComboBlood)) {
                            cmbblood.setSelectedIndex(i);
                            break;
                        }
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Exception error occured during execution\nError: " + e, "Employee ID Generation Error", JOptionPane.WARNING_MESSAGE);
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_cmbnameActionPerformed

    /**
     * @param args the command line arguments
     */
    public void PatientName() {
        try {
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from PatientTable");
            while (rs.next()) {
                cmbblood.addItem(rs.getString("BloodGroup").trim());
                cmbname.addItem(rs.getString("PatName").trim());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Exception error occured during execution\nError: " + e, "Database Connection Error", JOptionPane.WARNING_MESSAGE);
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPatient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbblood;
    private javax.swing.JComboBox cmbname;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
